#user  nobody;  # Consider running as a less privileged user if security is a concern (e.g., www-data)

worker_processes auto; # Use 'auto' to automatically detect the number of CPU cores

error_log logs/error.log warn; # Use 'warn' level for production, 'debug' for troubleshooting

events {
  worker_connections 1024; # Adjust if needed. The default is usually fine.
}

http {
  include mime.types;
  default_type application/octet-stream;

  # Removed the COOKIE_abcdexpid map - If you don't use this, remove it. It's just adding complexity.
  #map $COOKIE_abcdexpid $group {
  #  default root;
  #}

  # Optimize the $log_filter map. It can be simplified.
  map $uri $log_filter {
    default 1;
    ~*\.(gif|jpg|jpeg|png|bmp|swf|svg|woff|ttf|ico)$ 0;
  }

  etag on;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"'; # More informative log format

  keepalive_timeout 65;

  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
  gzip_min_length 1024;
  gzip_comp_level 5; # A good balance between compression and CPU usage. Higher is better compression, but more CPU intensive.

  proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;

  # Consider a separate server block for HTTP -> HTTPS redirection
  server {
    listen 80;
    server_name qio.wiki;
    return 301 https://$server_name$request_uri; # Use $request_uri to preserve query parameters
  }

  server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name q;
    ssl_certificate cert/mkcert/cert.pem;
    ssl_certificate_key cert/mkcert/key.pem;
    # server_name qio.wiki;
    # ssl_certificate cert/qio.wiki_bundle.crt;
    # ssl_certificate_key cert/qio.wiki.key;

    # location ~* \.(css|js|ico|gif|jpg|jpeg|png)$ {
    #   expires 7d;
    #   log_not_found off;
    #   access_log off;
    #   add_header Cache-Control "public, immutable, max-age=604800"; # Explicit caching header
    # }

    location / {
      proxy_pass http://127.0.0.1:83;
      proxy_set_header Host $host; # Send the original host header
      proxy_set_header X-Real-IP $remote_addr; # Pass client IP
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Pass forwarded IPs
      proxy_set_header X-Forwarded-Proto $scheme; # Pass the protocol (http/https)
      proxy_cache my_cache;
      proxy_cache_valid 200 1h;
      proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504; #Serve stale content in case of errors or during updates
    }

    # 引入外部配置文件
    include ssl_and_proxy.conf;

    location ~ ^/favicon.ico$ {
      root html;
      log_not_found off;
      access_log off;
    }

    location ~ ^/cdn(/.+)$ {
      rewrite ^/cdn(/.+)$ $1 break;
      root cdn;
    }
  }
}
